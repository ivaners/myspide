#server.port=7080

#Context Path
#server.context-path=/SpringBootDemo

#session超时时间
#server.session-timeout=300

#是否启用debug模式
#debug=true

#logging.level.org.springframework.web=DEBUG
logging.file=log/java.log

#Druid
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/weatherspider?useUnicode=true&characterEncoding=utf-8&failOverReadOnly=false&useSSL=false&useLegacyDatetimeCode=false
spring.datasource.username=root
spring.datasource.password=loong

spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
spring.datasource.maxWait=60000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
#spring.datasource.filters=stat,wall,slf4j

#mybatis
mybatis.typeAliasesPackage=tk.ivanlily.mapper
mybatis.mapper-locations=classpath:tk/ivanlily/mapper/xml/*.xml


#定时任务执行频率
#第4,9,13,19小时的10分5秒执行天气更新
task.updateWeather.schedule=5 10 4,9,13,19 * * ?
#每隔4分钟的第1秒检查数据库中的获取到的代理IP是否可用
task.checkProxyIp.schedule=1 */4 * * * ?
#每隔9分钟的第20秒调用一个爬虫获取可用的代理IP
task.crawlProxyIp_1.schedule=20 */9 * * * ?
#每隔19分钟的第40秒调用另一个爬虫获取可用的代理IP
task.crawlProxyIp_2.schedule=40 */19 * * * ?

